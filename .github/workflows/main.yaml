name: Java CI with Maven  # Name of the workflow

on:
  pull_request:  # Trigger the workflow on pull requests
    branches:
      - main  # Run the workflow only if the pull request is targeted to the 'main' branch
    types:
      - opened  # Run the workflow when a pull request is opened
      - synchronize  # Run the workflow when a pull request is updated

jobs:
  build:
    # Condition to run the job: only if the source branch starts with 'develop/', 'feature/', or 'fix/'
    if: |
      startsWith(github.head_ref, 'develop/') ||
      startsWith(github.head_ref, 'feature/') ||
      startsWith(github.head_ref, 'fix/')
    runs-on: ubuntu-latest  # Specify the OS for the runner (ubuntu-latest)

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Step to check out the code from the repository

      - name: Set up JDK 17
        uses: actions/setup-java@v3  # Step to install the Java Development Kit (JDK)
        with:
          distribution: 'graalvm'  # Specify the JDK distribution
          java-version: '17'  # Specify the Java version to use (17)

      - name: Cache Maven dependencies
        uses: actions/cache@v3  # Use caching to save Maven dependencies
        with:
          path: ~/.m2/repository  # Path to the cache location (where Maven stores dependencies)
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}  # Unique cache key based on OS and pom.xml content
          restore-keys: |
            ${{ runner.os }}-maven-  # Fallback key based on OS only

      - name: Run tests with Maven
        run: mvn clean verify jacoco:report  # Run tests with Maven and generate a coverage report with Jacoco

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master  # Step to perform code quality analysis with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Authentication token for SonarQube
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # URL of the SonarQube server
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.branch.name=master
            -Dsonar.java.binaries=target/classes
            -Dsonar.coverage.exclusions=**/test/**/*
            -Dsonar.exclusions=**/test/**/*

      - name: Wait for SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master  # Step to wait for SonarQube Quality Gate results
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
